"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typographySize = exports.s_variant = exports.s_text = exports.s_svgColor = exports.s_size = exports.rootContainer = exports.hiddenInputCss = exports.checkboxSize = void 0;
var _react = require("@emotion/react");
var _styles = _interopRequireDefault(require("@ssoc/styles"));
var _utils = require("@ssoc/utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
var CHECKBOX_COLORS = {
  black: _styles.default.colors.black,
  gray: _styles.default.colors.gray[500],
  default: _styles.default.colors.default,
  red: _styles.default.colors.red[900]
};
var checkboxSize = exports.checkboxSize = {
  xs: {
    width: '1.2rem',
    height: '1.2rem'
  },
  s: {
    width: '1.3rem',
    height: '1.3rem'
  },
  md: {
    width: '1.5rem',
    height: '1.5rem'
  },
  lg: {
    width: '1.75rem',
    height: '1.75rem'
  }
};
var typographySize = exports.typographySize = {
  xs: {
    typography: _styles.default.typography.subCaptionRegular
  },
  s: {
    typography: _styles.default.typography.captionRegular
  },
  md: {
    typography: _styles.default.typography.captionRegular
  },
  lg: {
    typography: _styles.default.typography.bodyRegular
  }
};
var s_size = exports.s_size = function s_size() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 's';
  return (0, _react.css)("width:", checkboxSize[size].width, ";height:", checkboxSize[size].height, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_size;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "1y4yghl",
  styles: "padding-bottom:0.1rem"
} : {
  name: "9hkerc-s_text",
  styles: "padding-bottom:0.1rem;label:s_text;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "1fmrbww",
  styles: "padding-bottom:0.04rem"
} : {
  name: "1a9w9mj-s_text",
  styles: "padding-bottom:0.04rem;label:s_text;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var s_text = exports.s_text = function s_text() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 's';
  var disabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return (0, _react.css)(typographySize[size].typography, ";color:", _styles.default.colors.black, ";-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;appearance:none;-webkit-appearance:none;-moz-appearance:none;", disabled && (0, _react.css)("color:", _styles.default.colors.disabled, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_text;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " ", size === 'md' && _ref3, " ", size === 'lg' && _ref2, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_text;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
var baseSVGwithColor = function baseSVGwithColor() {
  var isChecked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var defaultChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var disabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return (0, _react.css)("position:absolute;width:100%;height:100%;color:", (defaultChecked || isChecked) && disabled && _styles.default.colors.white, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:baseSVGwithColor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
var s_svgColor = exports.s_svgColor = function s_svgColor() {
  var variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'outline';
  var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
  var isChecked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var defaultChecked = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var disabled = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  switch (variant) {
    case 'outline':
    case 'subtle':
      return (0, _react.css)("color:transparent;", isChecked && (0, _react.css)("color:", CHECKBOX_COLORS[color], ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_svgColor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " ", baseSVGwithColor(isChecked, defaultChecked, disabled), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_svgColor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
    case 'solid':
      return (0, _react.css)("color:transparent;", isChecked && (0, _react.css)("color:", _styles.default.colors.white, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_svgColor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " ", baseSVGwithColor(isChecked, defaultChecked, disabled), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_svgColor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }
};
var _ref = process.env.NODE_ENV === "production" ? {
  name: "1ll9bqd",
  styles: "cursor:default"
} : {
  name: "12wdx8j-baseVariant",
  styles: "cursor:default;label:baseVariant;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9DaGVja2JveC9DaGVja2JveC5zdHlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3SU8iLCJmaWxlIjoiLi4vLi4vc3JjL0NoZWNrYm94L0NoZWNrYm94LnN0eWxlLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDU1NPYmplY3QgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgdGhlbWUgZnJvbSAnQHNzb2Mvc3R5bGVzJztcbmltcG9ydCB7IGhleFRvUmdiIH0gZnJvbSAnQHNzb2MvdXRpbHMnO1xuaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBDaGVja2JveENvbG9yLCBDaGVja2JveFNpemUsIENoZWNrYm94VmFyaWFudCB9IGZyb20gJy4vQ2hlY2tib3hSb290JztcblxuY29uc3QgQ0hFQ0tCT1hfQ09MT1JTID0ge1xuICAgIGJsYWNrOiB0aGVtZS5jb2xvcnMuYmxhY2ssXG4gICAgZ3JheTogdGhlbWUuY29sb3JzLmdyYXlbNTAwXSxcbiAgICBkZWZhdWx0OiB0aGVtZS5jb2xvcnMuZGVmYXVsdCxcbiAgICByZWQ6IHRoZW1lLmNvbG9ycy5yZWRbOTAwXSxcbn07XG5cbmludGVyZmFjZSBUeXBvZ3JhcGh5IGV4dGVuZHMgQ1NTT2JqZWN0IHtcbiAgICBmb250U2l6ZTogQ1NTUHJvcGVydGllc1snZm9udFNpemUnXTtcbiAgICBmb250V2VpZ2h0OiBDU1NQcm9wZXJ0aWVzWydmb250V2VpZ2h0J107XG4gICAgbGluZUhlaWdodDogQ1NTUHJvcGVydGllc1snbGluZUhlaWdodCddO1xufVxuaW50ZXJmYWNlIFNpemUge1xuICAgIHdpZHRoPzogQ1NTUHJvcGVydGllc1snd2lkdGgnXTtcbiAgICBoZWlnaHQ/OiBDU1NQcm9wZXJ0aWVzWydoZWlnaHQnXTtcbiAgICB0eXBvZ3JhcGh5PzogVHlwb2dyYXBoeTtcbn1cblxuZXhwb3J0IGNvbnN0IGNoZWNrYm94U2l6ZTogUmVjb3JkPENoZWNrYm94U2l6ZSwgU2l6ZT4gPSB7XG4gICAgeHM6IHsgd2lkdGg6ICcxLjJyZW0nLCBoZWlnaHQ6ICcxLjJyZW0nIH0sXG4gICAgczogeyB3aWR0aDogJzEuM3JlbScsIGhlaWdodDogJzEuM3JlbScgfSxcbiAgICBtZDogeyB3aWR0aDogJzEuNXJlbScsIGhlaWdodDogJzEuNXJlbScgfSxcbiAgICBsZzogeyB3aWR0aDogJzEuNzVyZW0nLCBoZWlnaHQ6ICcxLjc1cmVtJyB9LFxufTtcblxuZXhwb3J0IGNvbnN0IHR5cG9ncmFwaHlTaXplOiBSZWNvcmQ8Q2hlY2tib3hTaXplLCBTaXplPiA9IHtcbiAgICB4czogeyB0eXBvZ3JhcGh5OiB0aGVtZS50eXBvZ3JhcGh5LnN1YkNhcHRpb25SZWd1bGFyIH0sXG4gICAgczogeyB0eXBvZ3JhcGh5OiB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb25SZWd1bGFyIH0sXG4gICAgbWQ6IHsgdHlwb2dyYXBoeTogdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9uUmVndWxhciB9LFxuICAgIGxnOiB7IHR5cG9ncmFwaHk6IHRoZW1lLnR5cG9ncmFwaHkuYm9keVJlZ3VsYXIgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBzX3NpemUgPSAoc2l6ZTogQ2hlY2tib3hTaXplID0gJ3MnKSA9PiB7XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgICAgd2lkdGg6ICR7Y2hlY2tib3hTaXplW3NpemVdLndpZHRofTtcbiAgICAgICAgaGVpZ2h0OiAke2NoZWNrYm94U2l6ZVtzaXplXS5oZWlnaHR9O1xuICAgIGA7XG59O1xuXG5leHBvcnQgY29uc3Qgc190ZXh0ID0gKHNpemU6IENoZWNrYm94U2l6ZSA9ICdzJywgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xuICAgIHJldHVybiBjc3NgXG4gICAgICAgICR7dHlwb2dyYXBoeVNpemVbc2l6ZV0udHlwb2dyYXBoeX07XG4gICAgICAgIGNvbG9yOiAke3RoZW1lLmNvbG9ycy5ibGFja307XG4gICAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG5cbiAgICAgICAgYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgICAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XG5cbiAgICAgICAgJHtkaXNhYmxlZCAmJlxuICAgICAgICBjc3NgXG4gICAgICAgICAgICBjb2xvcjogJHt0aGVtZS5jb2xvcnMuZGlzYWJsZWR9O1xuICAgICAgICBgfVxuICAgICAgICAke3NpemUgPT09ICdtZCcgJiZcbiAgICAgICAgY3NzYFxuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDAuMDRyZW07XG4gICAgICAgIGB9XG5cbiAgICAgICAgJHtzaXplID09PSAnbGcnICYmXG4gICAgICAgIGNzc2BcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAwLjFyZW07XG4gICAgICAgIGB9XG4gICAgYDtcbn07XG5cbmNvbnN0IGJhc2VTVkd3aXRoQ29sb3IgPSAoXG4gICAgaXNDaGVja2VkOiBib29sZWFuID0gZmFsc2UsXG4gICAgZGVmYXVsdENoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlLFxuKSA9PiBjc3NgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBjb2xvcjogJHsoZGVmYXVsdENoZWNrZWQgfHwgaXNDaGVja2VkKSAmJiBkaXNhYmxlZCAmJiB0aGVtZS5jb2xvcnMud2hpdGV9O1xuYDtcblxuZXhwb3J0IGNvbnN0IHNfc3ZnQ29sb3IgPSAoXG4gICAgdmFyaWFudDogQ2hlY2tib3hWYXJpYW50ID0gJ291dGxpbmUnLFxuICAgIGNvbG9yOiBDaGVja2JveENvbG9yID0gJ2RlZmF1bHQnLFxuICAgIGlzQ2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGRlZmF1bHRDaGVja2VkOiBib29sZWFuID0gZmFsc2UsXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZSxcbikgPT4ge1xuICAgIHN3aXRjaCAodmFyaWFudCkge1xuICAgICAgICBjYXNlICdvdXRsaW5lJzpcbiAgICAgICAgY2FzZSAnc3VidGxlJzpcbiAgICAgICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICAgICAgY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICAgICR7aXNDaGVja2VkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtDSEVDS0JPWF9DT0xPUlNbY29sb3JdfTtcbiAgICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICAgICR7YmFzZVNWR3dpdGhDb2xvcihpc0NoZWNrZWQsIGRlZmF1bHRDaGVja2VkLCBkaXNhYmxlZCl9XG4gICAgICAgICAgICBgO1xuICAgICAgICBjYXNlICdzb2xpZCc6XG4gICAgICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgICAke2lzQ2hlY2tlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7dGhlbWUuY29sb3JzLndoaXRlfTtcbiAgICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICAgICR7YmFzZVNWR3dpdGhDb2xvcihpc0NoZWNrZWQsIGRlZmF1bHRDaGVja2VkLCBkaXNhYmxlZCl9XG4gICAgICAgICAgICBgO1xuICAgIH1cbn07XG5cbmNvbnN0IGJhc2VWYXJpYW50ID0gKFxuICAgIGlzQ2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGRlZmF1bHRDaGVja2VkOiBib29sZWFuID0gZmFsc2UsXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZSxcbikgPT4gY3NzYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcblxuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGFwcGVhcmFuY2U6IG5vbmU7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICR7ZGlzYWJsZWQgJiZcbiAgICBjc3NgXG4gICAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICBgfVxuXG4gICAgJHsoZGVmYXVsdENoZWNrZWQgfHwgaXNDaGVja2VkKSAmJlxuICAgIGRpc2FibGVkICYmXG4gICAgY3NzYFxuICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RoZW1lLmNvbG9ycy5kaXNhYmxlZH07XG4gICAgYH1cbmA7XG5cbmV4cG9ydCBjb25zdCBzX3ZhcmlhbnQgPSAoXG4gICAgaXNDaGVja2VkOiBib29sZWFuID0gZmFsc2UsXG4gICAgdmFyaWFudDogQ2hlY2tib3hWYXJpYW50ID0gJ291dGxpbmUnLFxuICAgIGNvbG9yOiBDaGVja2JveENvbG9yID0gJ2RlZmF1bHQnLFxuICAgIGRlZmF1bHRDaGVja2VkOiBib29sZWFuID0gZmFsc2UsXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZSxcbikgPT4ge1xuICAgIHN3aXRjaCAodmFyaWFudCkge1xuICAgICAgICBjYXNlICdvdXRsaW5lJzpcbiAgICAgICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAwLjAyNXJlbSBzb2xpZDtcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICR7dGhlbWUuY29sb3JzLmdyYXlbNDAwXX07XG4gICAgICAgICAgICAgICAgJHtpc0NoZWNrZWQgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogcmdiYSgke2hleFRvUmdiKENIRUNLQk9YX0NPTE9SU1tjb2xvcl0pfSwgMC43KTtcbiAgICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICAgICR7YmFzZVZhcmlhbnQoaXNDaGVja2VkLCBkZWZhdWx0Q2hlY2tlZCwgZGlzYWJsZWQpfTtcbiAgICAgICAgICAgIGA7XG4gICAgICAgIGNhc2UgJ3NvbGlkJzpcbiAgICAgICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAwLjAyNXJlbSBzb2xpZDtcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICR7dGhlbWUuY29sb3JzLmdyYXlbNDAwXX07XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgJHtpc0NoZWNrZWQgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Q0hFQ0tCT1hfQ09MT1JTW2NvbG9yXX07XG4gICAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgICAke2Jhc2VWYXJpYW50KGlzQ2hlY2tlZCwgZGVmYXVsdENoZWNrZWQsIGRpc2FibGVkKX07XG4gICAgICAgICAgICBgO1xuICAgICAgICBjYXNlICdzdWJ0bGUnOlxuICAgICAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgICAgICBib3JkZXI6IDAuMDI1cmVtIHNvbGlkO1xuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgke2hleFRvUmdiKENIRUNLQk9YX0NPTE9SU1tjb2xvcl0pfSwgMC4yKTtcbiAgICAgICAgICAgICAgICAke2Rpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RoZW1lLmNvbG9ycy5kaXNhYmxlZH07XG4gICAgICAgICAgICAgICAgYH07XG4gICAgICAgICAgICAgICAgJHtiYXNlVmFyaWFudChpc0NoZWNrZWQsIGRlZmF1bHRDaGVja2VkLCBkaXNhYmxlZCl9O1xuICAgICAgICAgICAgYDtcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3Qgcm9vdENvbnRhaW5lciA9IGNzc2BcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZ2FwOiAwLjRyZW07XG5gO1xuXG5leHBvcnQgY29uc3QgaGlkZGVuSW5wdXRDc3MgPSBjc3NgXG4gICAgZGlzcGxheTogbm9uZTtcbmA7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var baseVariant = function baseVariant() {
  var isChecked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var defaultChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var disabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return (0, _react.css)("display:flex;position:relative;align-items:center;justify-content:center;border-radius:0.25rem;margin:0;padding:0;appearance:none;-webkit-appearance:none;-moz-appearance:none;box-sizing:border-box;cursor:pointer;", disabled && _ref, " ", (defaultChecked || isChecked) && disabled && (0, _react.css)("border-color:transparent;background-color:", _styles.default.colors.disabled, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:baseVariant;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:baseVariant;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
var s_variant = exports.s_variant = function s_variant() {
  var isChecked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var variant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'outline';
  var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
  var defaultChecked = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var disabled = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  switch (variant) {
    case 'outline':
      return (0, _react.css)("border:0.025rem solid;border-color:", _styles.default.colors.gray[400], ";", isChecked && (0, _react.css)("border-color:rgba(", (0, _utils.hexToRgb)(CHECKBOX_COLORS[color]), ", 0.7);" + (process.env.NODE_ENV === "production" ? "" : ";label:s_variant;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " ", baseVariant(isChecked, defaultChecked, disabled), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_variant;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
    case 'solid':
      return (0, _react.css)("border:0.025rem solid;border-color:", _styles.default.colors.gray[400], ";background-color:transparent;", isChecked && (0, _react.css)("border-color:transparent;background-color:", CHECKBOX_COLORS[color], ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_variant;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " ", baseVariant(isChecked, defaultChecked, disabled), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_variant;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
    case 'subtle':
      return (0, _react.css)("border:0.025rem solid;border-color:transparent;background-color:rgba(", (0, _utils.hexToRgb)(CHECKBOX_COLORS[color]), ", 0.2);", disabled && (0, _react.css)("background-color:", _styles.default.colors.disabled, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_variant;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), ";", baseVariant(isChecked, defaultChecked, disabled), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:s_variant;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }
};
var rootContainer = exports.rootContainer = process.env.NODE_ENV === "production" ? {
  name: "tbgj6l",
  styles: "display:inline-flex;white-space:nowrap;align-items:center;justify-content:center;gap:0.4rem"
} : {
  name: "alrsbk-rootContainer",
  styles: "display:inline-flex;white-space:nowrap;align-items:center;justify-content:center;gap:0.4rem;label:rootContainer;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var hiddenInputCss = exports.hiddenInputCss = process.env.NODE_ENV === "production" ? {
  name: "eivff4",
  styles: "display:none"
} : {
  name: "1a8g9nh-hiddenInputCss",
  styles: "display:none;label:hiddenInputCss;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9DaGVja2JveC9DaGVja2JveC5zdHlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3TWlDIiwiZmlsZSI6Ii4uLy4uL3NyYy9DaGVja2JveC9DaGVja2JveC5zdHlsZS50cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ1NTT2JqZWN0IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHRoZW1lIGZyb20gJ0Bzc29jL3N0eWxlcyc7XG5pbXBvcnQgeyBoZXhUb1JnYiB9IGZyb20gJ0Bzc29jL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgQ2hlY2tib3hDb2xvciwgQ2hlY2tib3hTaXplLCBDaGVja2JveFZhcmlhbnQgfSBmcm9tICcuL0NoZWNrYm94Um9vdCc7XG5cbmNvbnN0IENIRUNLQk9YX0NPTE9SUyA9IHtcbiAgICBibGFjazogdGhlbWUuY29sb3JzLmJsYWNrLFxuICAgIGdyYXk6IHRoZW1lLmNvbG9ycy5ncmF5WzUwMF0sXG4gICAgZGVmYXVsdDogdGhlbWUuY29sb3JzLmRlZmF1bHQsXG4gICAgcmVkOiB0aGVtZS5jb2xvcnMucmVkWzkwMF0sXG59O1xuXG5pbnRlcmZhY2UgVHlwb2dyYXBoeSBleHRlbmRzIENTU09iamVjdCB7XG4gICAgZm9udFNpemU6IENTU1Byb3BlcnRpZXNbJ2ZvbnRTaXplJ107XG4gICAgZm9udFdlaWdodDogQ1NTUHJvcGVydGllc1snZm9udFdlaWdodCddO1xuICAgIGxpbmVIZWlnaHQ6IENTU1Byb3BlcnRpZXNbJ2xpbmVIZWlnaHQnXTtcbn1cbmludGVyZmFjZSBTaXplIHtcbiAgICB3aWR0aD86IENTU1Byb3BlcnRpZXNbJ3dpZHRoJ107XG4gICAgaGVpZ2h0PzogQ1NTUHJvcGVydGllc1snaGVpZ2h0J107XG4gICAgdHlwb2dyYXBoeT86IFR5cG9ncmFwaHk7XG59XG5cbmV4cG9ydCBjb25zdCBjaGVja2JveFNpemU6IFJlY29yZDxDaGVja2JveFNpemUsIFNpemU+ID0ge1xuICAgIHhzOiB7IHdpZHRoOiAnMS4ycmVtJywgaGVpZ2h0OiAnMS4ycmVtJyB9LFxuICAgIHM6IHsgd2lkdGg6ICcxLjNyZW0nLCBoZWlnaHQ6ICcxLjNyZW0nIH0sXG4gICAgbWQ6IHsgd2lkdGg6ICcxLjVyZW0nLCBoZWlnaHQ6ICcxLjVyZW0nIH0sXG4gICAgbGc6IHsgd2lkdGg6ICcxLjc1cmVtJywgaGVpZ2h0OiAnMS43NXJlbScgfSxcbn07XG5cbmV4cG9ydCBjb25zdCB0eXBvZ3JhcGh5U2l6ZTogUmVjb3JkPENoZWNrYm94U2l6ZSwgU2l6ZT4gPSB7XG4gICAgeHM6IHsgdHlwb2dyYXBoeTogdGhlbWUudHlwb2dyYXBoeS5zdWJDYXB0aW9uUmVndWxhciB9LFxuICAgIHM6IHsgdHlwb2dyYXBoeTogdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9uUmVndWxhciB9LFxuICAgIG1kOiB7IHR5cG9ncmFwaHk6IHRoZW1lLnR5cG9ncmFwaHkuY2FwdGlvblJlZ3VsYXIgfSxcbiAgICBsZzogeyB0eXBvZ3JhcGh5OiB0aGVtZS50eXBvZ3JhcGh5LmJvZHlSZWd1bGFyIH0sXG59O1xuXG5leHBvcnQgY29uc3Qgc19zaXplID0gKHNpemU6IENoZWNrYm94U2l6ZSA9ICdzJykgPT4ge1xuICAgIHJldHVybiBjc3NgXG4gICAgICAgIHdpZHRoOiAke2NoZWNrYm94U2l6ZVtzaXplXS53aWR0aH07XG4gICAgICAgIGhlaWdodDogJHtjaGVja2JveFNpemVbc2l6ZV0uaGVpZ2h0fTtcbiAgICBgO1xufTtcblxuZXhwb3J0IGNvbnN0IHNfdGV4dCA9IChzaXplOiBDaGVja2JveFNpemUgPSAncycsIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2UpID0+IHtcbiAgICByZXR1cm4gY3NzYFxuICAgICAgICAke3R5cG9ncmFwaHlTaXplW3NpemVdLnR5cG9ncmFwaHl9O1xuICAgICAgICBjb2xvcjogJHt0aGVtZS5jb2xvcnMuYmxhY2t9O1xuICAgICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICAgICAgIGFwcGVhcmFuY2U6IG5vbmU7XG4gICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xuXG4gICAgICAgICR7ZGlzYWJsZWQgJiZcbiAgICAgICAgY3NzYFxuICAgICAgICAgICAgY29sb3I6ICR7dGhlbWUuY29sb3JzLmRpc2FibGVkfTtcbiAgICAgICAgYH1cbiAgICAgICAgJHtzaXplID09PSAnbWQnICYmXG4gICAgICAgIGNzc2BcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAwLjA0cmVtO1xuICAgICAgICBgfVxuXG4gICAgICAgICR7c2l6ZSA9PT0gJ2xnJyAmJlxuICAgICAgICBjc3NgXG4gICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMC4xcmVtO1xuICAgICAgICBgfVxuICAgIGA7XG59O1xuXG5jb25zdCBiYXNlU1ZHd2l0aENvbG9yID0gKFxuICAgIGlzQ2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGRlZmF1bHRDaGVja2VkOiBib29sZWFuID0gZmFsc2UsXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZSxcbikgPT4gY3NzYFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgY29sb3I6ICR7KGRlZmF1bHRDaGVja2VkIHx8IGlzQ2hlY2tlZCkgJiYgZGlzYWJsZWQgJiYgdGhlbWUuY29sb3JzLndoaXRlfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBzX3N2Z0NvbG9yID0gKFxuICAgIHZhcmlhbnQ6IENoZWNrYm94VmFyaWFudCA9ICdvdXRsaW5lJyxcbiAgICBjb2xvcjogQ2hlY2tib3hDb2xvciA9ICdkZWZhdWx0JyxcbiAgICBpc0NoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICBkZWZhdWx0Q2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2UsXG4pID0+IHtcbiAgICBzd2l0Y2ggKHZhcmlhbnQpIHtcbiAgICAgICAgY2FzZSAnb3V0bGluZSc6XG4gICAgICAgIGNhc2UgJ3N1YnRsZSc6XG4gICAgICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgICAke2lzQ2hlY2tlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q0hFQ0tCT1hfQ09MT1JTW2NvbG9yXX07XG4gICAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgICAke2Jhc2VTVkd3aXRoQ29sb3IoaXNDaGVja2VkLCBkZWZhdWx0Q2hlY2tlZCwgZGlzYWJsZWQpfVxuICAgICAgICAgICAgYDtcbiAgICAgICAgY2FzZSAnc29saWQnOlxuICAgICAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgICAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgJHtpc0NoZWNrZWQgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke3RoZW1lLmNvbG9ycy53aGl0ZX07XG4gICAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgICAke2Jhc2VTVkd3aXRoQ29sb3IoaXNDaGVja2VkLCBkZWZhdWx0Q2hlY2tlZCwgZGlzYWJsZWQpfVxuICAgICAgICAgICAgYDtcbiAgICB9XG59O1xuXG5jb25zdCBiYXNlVmFyaWFudCA9IChcbiAgICBpc0NoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICBkZWZhdWx0Q2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2UsXG4pID0+IGNzc2BcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XG5cbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBhcHBlYXJhbmNlOiBub25lO1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAke2Rpc2FibGVkICYmXG4gICAgY3NzYFxuICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgYH1cblxuICAgICR7KGRlZmF1bHRDaGVja2VkIHx8IGlzQ2hlY2tlZCkgJiZcbiAgICBkaXNhYmxlZCAmJlxuICAgIGNzc2BcbiAgICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGVtZS5jb2xvcnMuZGlzYWJsZWR9O1xuICAgIGB9XG5gO1xuXG5leHBvcnQgY29uc3Qgc192YXJpYW50ID0gKFxuICAgIGlzQ2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlLFxuICAgIHZhcmlhbnQ6IENoZWNrYm94VmFyaWFudCA9ICdvdXRsaW5lJyxcbiAgICBjb2xvcjogQ2hlY2tib3hDb2xvciA9ICdkZWZhdWx0JyxcbiAgICBkZWZhdWx0Q2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2UsXG4pID0+IHtcbiAgICBzd2l0Y2ggKHZhcmlhbnQpIHtcbiAgICAgICAgY2FzZSAnb3V0bGluZSc6XG4gICAgICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgICAgIGJvcmRlcjogMC4wMjVyZW0gc29saWQ7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAke3RoZW1lLmNvbG9ycy5ncmF5WzQwMF19O1xuICAgICAgICAgICAgICAgICR7aXNDaGVja2VkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6IHJnYmEoJHtoZXhUb1JnYihDSEVDS0JPWF9DT0xPUlNbY29sb3JdKX0sIDAuNyk7XG4gICAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgICAke2Jhc2VWYXJpYW50KGlzQ2hlY2tlZCwgZGVmYXVsdENoZWNrZWQsIGRpc2FibGVkKX07XG4gICAgICAgICAgICBgO1xuICAgICAgICBjYXNlICdzb2xpZCc6XG4gICAgICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgICAgIGJvcmRlcjogMC4wMjVyZW0gc29saWQ7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAke3RoZW1lLmNvbG9ycy5ncmF5WzQwMF19O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICAgICR7aXNDaGVja2VkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke0NIRUNLQk9YX0NPTE9SU1tjb2xvcl19O1xuICAgICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICAgICAgJHtiYXNlVmFyaWFudChpc0NoZWNrZWQsIGRlZmF1bHRDaGVja2VkLCBkaXNhYmxlZCl9O1xuICAgICAgICAgICAgYDtcbiAgICAgICAgY2FzZSAnc3VidGxlJzpcbiAgICAgICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAwLjAyNXJlbSBzb2xpZDtcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoJHtoZXhUb1JnYihDSEVDS0JPWF9DT0xPUlNbY29sb3JdKX0sIDAuMik7XG4gICAgICAgICAgICAgICAgJHtkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGVtZS5jb2xvcnMuZGlzYWJsZWR9O1xuICAgICAgICAgICAgICAgIGB9O1xuICAgICAgICAgICAgICAgICR7YmFzZVZhcmlhbnQoaXNDaGVja2VkLCBkZWZhdWx0Q2hlY2tlZCwgZGlzYWJsZWQpfTtcbiAgICAgICAgICAgIGA7XG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJvb3RDb250YWluZXIgPSBjc3NgXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGdhcDogMC40cmVtO1xuYDtcblxuZXhwb3J0IGNvbnN0IGhpZGRlbklucHV0Q3NzID0gY3NzYFxuICAgIGRpc3BsYXk6IG5vbmU7XG5gO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};